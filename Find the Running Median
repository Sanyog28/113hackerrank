


def runningMedian(a):
    min_heap = []  # right half (min-heap)
    max_heap = []  # left half (max-heap, stored as negative numbers)
    medians = []

    for num in a:
        # Add to the correct heap
        if not max_heap or num <= -max_heap[0]:
            heapq.heappush(max_heap, -num)
        else:
            heapq.heappush(min_heap, num)

        # Rebalance heaps
        if len(max_heap) > len(min_heap) + 1:
            heapq.heappush(min_heap, -heapq.heappop(max_heap))
        elif len(min_heap) > len(max_heap):
            heapq.heappush(max_heap, -heapq.heappop(min_heap))

        # Compute median
        if len(max_heap) == len(min_heap):
            median = (-max_heap[0] + min_heap[0]) / 2.0
        else:
            median = float(-max_heap[0])

        medians.append(round(median, 1))  # Keep one decimal as required

    return medians

